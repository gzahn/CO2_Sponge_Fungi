ps_ra <- ps %>% transform_sample_counts(function(x){x/sum(x)})
# Quick glance at alpha diversity ####
plot_richness(ps,x="Acidified",measures = "Shannon") +
facet_grid(~Sponge_Species) + labs(y="Shannon diversity")
ggsave("./output/figs/Shannon_diversity_dotplot_by_Species_and_Acidification.png",dpi=300)
# Calculate alpha diversity measures and add to metadata
ps@sam_data$Shannon <- estimate_richness(ps, measures="Shannon")$Shannon
ps@sam_data$Richness <- specnumber(otu_table(ps))
# save as dataframe object for easy modeling
meta <- as(sample_data(ps),"data.frame")
glimpse(meta)
# Export crosstab of acidification vs species
sink("./output/Sample_N_for_groups_Acidification_and_SpongeSpecies.txt")
table(ps@sam_data$Acidified,ps@sam_data$Sponge_Species)
sink(NULL)
# Merge samples for plotting ####
# merge based on sponge species and acidification
newvar <- paste(ps@sam_data$Sponge_Species,ps@sam_data$Acidified,sep="_")
ps@sam_data$newvar <- newvar
ps_merged <- merge_samples(ps,newvar)
# repair metadata
ps_merged@sam_data$Sponge_Species <- unlist(map(str_split(sample_names(ps_merged),"_"),1))
ps_merged@sam_data$Acidified <- unlist(map(str_split(sample_names(ps_merged),"_"),2))
# Quick heatmaps ####
# phylum
p <- ps_merged %>% tax_glom("Phylum") %>%
transform_sample_counts(function(x){x/sum(x)}) %>%
plot_heatmap(taxa.label = "Phylum",sample.label = "Sponge_Species") +
facet_grid(~Acidified,scales="free") + theme(strip.background = element_blank(), strip.text = element_text(face="bold")) + labs(x="Sponge species")
p$scales$scales[[3]]$name <- "Relative\nabundance"
p
ggsave("./output/figs/Heatmap_Phylum_RelAbund_by_Sponge_Species.png",dpi=300)
# class
p <- ps_merged %>% tax_glom("Class") %>%
transform_sample_counts(function(x){x/sum(x)}) %>%
plot_heatmap(taxa.label = "Class",sample.label = "Sponge_Species") +
facet_grid(~Acidified,scales="free") + theme(strip.background = element_blank(), strip.text = element_text(face="bold")) + labs(x="Sponge species")
p$scales$scales[[3]]$name <- "Relative\nabundance"
p
ggsave("./output/figs/Heatmap_Class_RelAbund_by_Sponge_Species.png",dpi=300)
# order
p <- ps_merged %>% tax_glom("Order") %>%
transform_sample_counts(function(x){x/sum(x)}) %>%
plot_heatmap(taxa.label = "Order",sample.label = "Sponge_Species") +
facet_grid(~Acidified,scales="free") + theme(strip.background = element_blank(), strip.text = element_text(face="bold")) + labs(x="Sponge species")
p$scales$scales[[3]]$name <- "Relative\nabundance"
p
ggsave("./output/figs/Heatmap_Order_RelAbund_by_Sponge_Species.png",dpi=300)
# alternate view
p <- ps_merged %>% tax_glom("Phylum") %>%
transform_sample_counts(function(x){x/sum(x)}) %>%
plot_heatmap(taxa.label = "Phylum",sample.label = "Acidified") +
facet_grid(~Sponge_Species,scales="free") + theme(strip.background = element_blank(), strip.text = element_text(face="bold")) + labs(x="Sponge species")
p$scales$scales[[3]]$name <- "Relative\nabundance"
p
ggsave("./output/figs/Heatmap_Phylum_Alternate_Layout.png",dpi=300)
# Diversity BarPlots ####
# stacked boxplots x-axis=Acidification, y-axis relative-abundance
# Phylum
ps_merged %>%
transform_sample_counts(function(x){x/sum(x)}) %>%
plot_bar2(fill="Phylum",x="Acidified") + scale_fill_manual(values = pal.discrete) +
labs(y="Relative abundance",x="Acidification") +
theme(axis.text.x = element_text(angle = 60,hjust=1),
axis.title = element_text(face="bold",size=16),
axis.text = element_text(face="bold",size=12),
strip.background = element_blank(),
strip.text = element_text(size=12,face="bold.italic")) +
facet_wrap(~Sponge_Species,scales = "free")
ggsave("./output/figs/Phylum_Diversity_BarChart_by_Acidification.png",dpi=300)
# Class
ps_merged %>%
transform_sample_counts(function(x){x/sum(x)}) %>%
plot_bar2(fill="Class",x="Acidified") + scale_fill_manual(values = pal.discrete) +
labs(y="Relative abundance",x="Acidification") +
theme(axis.text.x = element_text(angle = 60,hjust=1),
axis.title = element_text(face="bold",size=16),
axis.text = element_text(face="bold",size=12),
strip.background = element_blank(),
strip.text = element_text(size=12,face="bold.italic")) +
facet_wrap(~Sponge_Species,scales = "free")
ggsave("./output/figs/Class_Diversity_BarChart_by_Acidification.png",dpi=300,width = 10, height = 8)
# merge based on site only
ps_merged <- merge_samples(ps,"Sampling_Site")
# Phylum
ps_merged %>%
transform_sample_counts(function(x){x/sum(x)}) %>%
plot_bar2(fill="Phylum") + scale_fill_manual(values = pal.discrete) +
labs(y="Relative abundance",x="Site") +
theme(axis.text.x = element_text(angle = 60,hjust=1),
axis.title = element_text(face="bold",size=16),
axis.text = element_text(face="bold",size=12),
strip.background = element_blank(),
strip.text = element_text(size=12,face="bold.italic"))
ggsave("./output/figs/Phylum_Diversity_BarChart_by_Site.png",dpi=300)
# Class
ps_merged %>%
transform_sample_counts(function(x){x/sum(x)}) %>%
plot_bar2(fill="Class") + scale_fill_manual(values = pal.discrete) +
labs(y="Relative abundance",x="Site") +
theme(axis.text.x = element_text(angle = 60,hjust=1),
axis.title = element_text(face="bold",size=16),
axis.text = element_text(face="bold",size=12),
strip.background = element_blank(),
strip.text = element_text(size=12,face="bold.italic"))
ggsave("./output/figs/Class_Diversity_BarChart_by_Site.png",dpi=300)
# Model alpha diversity ####
# as a function of acidification, species, bleaching status
# Consider, first, the data without Seawater samples...not sure how to treat those...
meta2 <- meta[meta$Sponge_Species != "Seawater",]
mod1 <- glm(data = meta2,
Richness ~ pH + Sponge_Species)
summary(mod1)
mod2 <- glm(data = meta2,
Shannon ~ pH + Sponge_Species)
summary(mod2)
# ... Does not seem to be an effect for alpha diversity based on sponge species or acidification
# look at nestedness of species within sampling site
table(meta2$Sponge_Species,meta2$Sampling_Site)
# ANOVA of diversity by site
mod3 <- aov(data = meta2,
Shannon ~ Sampling_Site * Sponge_Species)
summary(mod3)
mod3b <- aov(data = meta2,
Richness ~ Sampling_Site * Sponge_Species)
summary(mod3b)
sink("./output/ANOVA_models_for_alpha-diversity.txt")
mod3
summary(mod3)
mod3b
summary(mod3b)
sink(NULL)
# look at cave vs non-cave sites
meta2 <- meta2 %>% mutate(LightStatus = case_when(Sampling_Site == "GM" ~ "Cave",
Sampling_Site != "GM" ~ "Open"))
mod4 <- glm(data = meta2,
Shannon ~ LightStatus * Sponge_Species)
summary(mod4) # not significant
mod5 <- glm(data = meta2,
Shannon ~ LightStatus * Sponge_Species)
summary(mod5) # not significant
# Alpha diversity comparison tables and more plots ####
p1 <- meta %>%
ggdensity(x="Richness", add = "median",
color = "Sponge_Species",fill="Sponge_Species",
rug = TRUE, facet.by = "Acidified") +
theme(strip.background = element_blank(),
strip.text = element_text(face="bold",size=14),
legend.text = element_text(face = "italic"),
axis.title = element_text(face="bold",size=16),
legend.position = "none") +
labs(x="Richness",y="Density",fill="Sponge species") +
scale_colour_manual(guide="none",values=pal.discrete) +
scale_fill_manual(values = pal.discrete)
p2 <- meta %>%
ggdensity(x="Shannon", add = "median",
color = "Sponge_Species",fill="Sponge_Species",
rug = TRUE, facet.by = "Acidified") +
theme(strip.background = element_blank(),
strip.text = element_text(face="bold",size=14),
legend.text = element_text(face = "italic"),
axis.title = element_text(face="bold",size=16),
legend.position = "bottom") +
labs(x="Shannon diversity",y="Density",fill="Sponge species") +
scale_colour_manual(guide="none",values=pal.discrete) +
scale_fill_manual(values = pal.discrete)
p1/p2
ggsave("./output/figs/Alpha-Diversity_Distributions_by_Sponge_Species.png",dpi=300)
# pH vs alpha diversity
comparisons <- list(c("6","7"),c("7","8"),c("6","8"))
p1 <- ggboxplot(meta, x = "pH", y = "Richness",
color = "pH", palette =pal.discrete,
add = "jitter") +
stat_compare_means(comparisons = comparisons) +
theme(axis.title = element_text(face="bold",size=14),
axis.text = element_text(face="bold")) +
labs(x="")
p2 <- ggboxplot(meta, x = "pH", y = "Shannon",
color = "pH", palette =pal.discrete,
add = "jitter") +
stat_compare_means(comparisons = comparisons) +
labs(y="Shannon diversity") +
theme(axis.title = element_text(face="bold",size=14),
axis.text = element_text(face="bold"),
legend.position = "none")
p1/p2
ggsave("./output/figs/Alpha-Diversity_Boxplots_over_pH.png",dpi=300,height = 8,width = 6)
######################### CORE MYCOBIOME ##################################
# find core mycobiome members of each sponge species
core_full <- ps_ra %>% core_members(prevalence = .25,detection = .01)
core_Crambe <- ps_ra %>% subset_samples(Sponge_Species == "Crambe") %>% core_members(prevalence = .25,detection = .01)
core_Chondrosia <- ps_ra %>% subset_samples(Sponge_Species == "Chondrosia") %>% core_members(prevalence = .25,detection = .01)
core_Petrosia <- ps_ra %>% subset_samples(Sponge_Species == "Petrosia") %>% core_members(prevalence = .25,detection = .01)
core_Chondrilla <- ps_ra %>% subset_samples(Sponge_Species == "Chondrilla") %>% core_members(prevalence = .25,detection = .01)
# save list in file
sink("./output/Core_Taxa_Names.txt")
print("Prevalence = 0.25; detection threshold = 0.01")
print("core_full")
core_full
print("core_Crambe")
core_Crambe
print("core_Chondrosia")
core_Chondrosia
print("core_Petrosia")
core_Petrosia
print("core_Chondrilla")
core_Chondrilla
sink(NULL)
# subset to those core taxa
ps_coretaxa <- ps %>% subset_taxa(taxa_names(ps) %in% unique(c(core_Chondrilla,core_Chondrosia,core_Crambe,core_Petrosia)))
ps_ra_coretaxa <- transform_sample_counts(ps_coretaxa,function(x){x/sum(x)})
sample_data(ps_ra_coretaxa)
str(meta)
core_adonis <- adonis(otu_table(ps_ra_coretaxa ~ meta$Sampling_Site * meta$Sponge_Species))
otu_table(ps_ra_coretaxa)
core_adonis <- adonis(otu_table(ps_ra_coretaxa) ~ meta$Sampling_Site * meta$Sponge_Species)
core_adonis <- adonis(otu_table(ps_ra_coretaxa) ~ meta$Sampling_Site * meta$Sponge_Species,na.rm=TRUE)
ps_ra_coretaxa <- ps_ra_coretaxa %>% subset_samples(sample_sums(ps_ra_coretaxa) > 0)
ps_ra_coretaxa
core_adonis <- adonis(otu_table(ps_ra_coretaxa) ~ meta$Sampling_Site * meta$Sponge_Species,na.rm=TRUE)
ps_ra_coretaxa <- transform_sample_counts(ps_coretaxa,function(x){x/sum(x)})
ps_ra_coretaxa <- ps_ra_coretaxa %>% subset_samples(sample_sums(ps_ra_coretaxa) > 0)
core_adonis <- adonis(otu_table(ps_ra_coretaxa) ~ ps_ra_coretaxa@sam_data$Sampling_Site * metaps_ra_coretaxa@sam_data$Sponge_Species,na.rm=TRUE)
core_adonis <- adonis(otu_table(ps_ra_coretaxa) ~ ps_ra_coretaxa@sam_data$Sampling_Site * ps_ra_coretaxa@sam_data$Sponge_Species,na.rm=TRUE)
summary(core_adonis)
core_adonis
sink("./output/permanova_comm-distance_vs_Site_and_Sponge-Species_only-core-taxa.txt")
core_adonis
sink(NULL)
library(tidyverse); packageVersion("tidyverse")
# library(patchwork); packageVersion("patchwork")
library(phyloseq); packageVersion("phyloseq")
# library(vegan); packageVersion("vegan")
# library(broom); packageVersion("broom")
# library(purrr); packageVersion("purrr")
# library(ade4); packageVersion("ade4")
library(vegan); packageVersion("vegan")
# BiocManager::install("microbiome")
library(microbiome); packageVersion("microbiome")
#functions
source("./R/bbdml_helper.R")
source("./R/palettes.R")
# IMPORT DATA ####
ps <- readRDS("./output/clean_phyloseq_object.RDS")
# remove "NA" Phylum taxa
ps <- subset_taxa(ps,!is.na(tax_table(ps)[,2]))
# relative abundance transformation
ps_ra <- ps %>% transform_sample_counts(function(x){x/sum(x)}) %>% subset_samples(Sponge_Species != "Seawater")
ps_ra@sam_data
library(corrr); packageVersion("corrr")
library(GGally)
library(GGally); packageVersion("GGally")
library(tidyverse); packageVersion("tidyverse")
library(patchwork); packageVersion("patchwork")
library(phyloseq); packageVersion("phyloseq")
library(vegan); packageVersion("vegan")
library(corrr); packageVersion("corrr")
library(microbiome); packageVersion("microbiome")
library(GGally); packageVersion("GGally")
#functions
source("./R/bbdml_helper.R")
source("./R/palettes.R")
# IMPORT DATA ####
ps <- readRDS("./output/clean_phyloseq_object.RDS")
# remove "NA" Phylum taxa
ps <- subset_taxa(ps,!is.na(tax_table(ps)[,2]))
# relative abundance transformation
ps_ra <- ps %>% transform_sample_counts(function(x){x/sum(x)}) %>% subset_samples(Sponge_Species != "Seawater")
ps_ra@sam_data
library(purrr); packageVersion("purrr")
# extract ASV table and metadata as data frames
meta <- meta(ps_ra)
# IMPORT DATA ####
ps <- readRDS("./output/clean_phyloseq_object.RDS")
# remove "NA" Phylum taxa
ps <- subset_taxa(ps,!is.na(tax_table(ps)[,2]))
ps
# extract ASV table and metadata as data frames
meta <- meta(ps_ra)
meta
str(meta)
str(sample_data(ps_ra))
# extract ASV table and metadata as data frames ####
meta <- meta(ps_ra)
microbiome::spreadplot(ps_ra)
# Look at relative abundance spread for ASVs
spreadplot(ps_ra) + theme(axis.text = element_blank())
# Look at relative abundance spread for ASVs
spreadplot(ps_ra) + theme(axis.text.x = element_blank())
# Look at relative abundance spread for ASVs
spreadplot(ps_ra) +
theme(axis.text.y = element_blank()) +
labs(y="ASVs")
# Look at relative abundance spread for ASVs
spreadplot(ps_ra) +
theme(axis.text.y = element_blank()) +
labs(x="ASVs")
# Look at relative abundance spread for ASVs
spreadplot(ps_ra) +
theme(axis.text.y = element_blank(),
axis.line.y = element_blank()) +
labs(x="ASVs",y="Relative abundance")
# Look at relative abundance spread for ASVs
spreadplot(ps_ra) +
theme(axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank()) +
labs(x="ASVs",y="Relative abundance")
?correlate()
# remove rare taxa (remove taxa not found in 20% of samples)
ps_ra_filtered <- filter_taxa(ps_ra, function(x) x > (0.2*length(x)), TRUE)
# remove rare taxa (remove taxa not found in 20% of samples)
ps_ra_filtered <- filter_taxa(ps_ra, function(x) sum(x > 3) > (0.2*length(x)), TRUE)
# remove rare taxa (remove taxa not found in 20% of samples)
ps_ra_filtered <- filter_taxa(ps, function(x) sum(x > 3) > (0.2*length(x)), TRUE)
# relative abundance transformation and remove Seawater samples
ps_ra <- ps_ra_filtered %>% transform_sample_counts(function(x){x/sum(x)}) %>% subset_samples(Sponge_Species != "Seawater")
ps_ra
# remove rare taxa (remove taxa not found in 20% of samples)
ps_ra_filtered <- filter_taxa(ps, function(x) sum(x > 1) > (0.2*length(x)), TRUE)
# relative abundance transformation and remove Seawater samples
ps_ra <- ps_ra_filtered %>% transform_sample_counts(function(x){x/sum(x)}) %>% subset_samples(Sponge_Species != "Seawater")
ps_ra
# remove rare taxa (remove taxa not found in 20% of samples)
ps_ra_filtered <- filter_taxa(ps, function(x) sum(x > 1) > (0.1*length(x)), TRUE)
# relative abundance transformation and remove Seawater samples
ps_ra <- ps_ra_filtered %>% transform_sample_counts(function(x){x/sum(x)}) %>% subset_samples(Sponge_Species != "Seawater")
ps_ra
# remove rare taxa (remove taxa not found in 10% of samples)
ps_ra_filtered <- filter_taxa(ps, function(x) sum(x > 0) > (0.1*length(x)), TRUE)
# relative abundance transformation and remove Seawater samples
ps_ra <- ps_ra_filtered %>% transform_sample_counts(function(x){x/sum(x)}) %>% subset_samples(Sponge_Species != "Seawater")
ps_ra
# extract metadata as data frame
meta <- meta(ps_ra)
# Correlate ####
full_cor <- correlate(x = otu_table(ps_ra),
y = meta,
use = "complete.obs")
# Correlate ####
full_cor <- correlate(x = otu_table(ps_ra),
y = meta$pH,
use = "complete.obs")
dim(otu_table(ps_ra))
otu_table(ps_ra) %>% as.data.frame()
asv <- otu_table(ps_ra) %>% as.data.frame()
class(asv)
# Correlate ####
full_cor <- correlate(x = asv,
y = meta$pH,
use = "complete.obs")
# extract data as data frames
meta <- meta(ps_ra); dim(meta)
asv <- otu_table(ps_ra) %>% as.data.frame() ; dim(asv)
x <- meta
y <- asv
grouping_info<-data.frame(row.names=rownames(asv),t(as.data.frame(strsplit(rownames(asv),"_"))))
grouping_info
groups<-grouping_info[,1]
groups
grouping_info <- meta %>% select(Sponge_Species,pH,Sampling_Site)
grouping_info
groups <- paste(grouping_info[,1],grouping_info[,2],grouping_info[,3])
groups
groups <- paste(grouping_info[,1],grouping_info[,2],grouping_info[,3],sep="_")
groups
method<-"pearson"
x <- meta
y <- asv
df<-NULL
for(i in colnames(x)){
for(j in colnames(y)){
for(k in unique(groups)){
a<-x[groups==k,i,drop=F]
b<-y[groups==k,j,drop=F]
tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value,k)
if(is.null(df)){
df<-tmp
}
else{
df<-rbind(df,tmp)
}
}
}
}
x <- asv
y <- meta
df<-NULL
for(i in colnames(x)){
for(j in colnames(y)){
for(k in unique(groups)){
a<-x[groups==k,i,drop=F]
b<-y[groups==k,j,drop=F]
tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value,k)
if(is.null(df)){
df<-tmp
}
else{
df<-rbind(df,tmp)
}
}
}
}
x[groups==k,i,drop=F]
y[groups==k,j,drop=F]
grouping_info
y <- grouping_info$pH
df<-NULL
for(i in colnames(x)){
for(j in colnames(y)){
for(k in unique(groups)){
a<-x[groups==k,i,drop=F]
b<-y[groups==k,j,drop=F]
tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value,k)
if(is.null(df)){
df<-tmp
}
else{
df<-rbind(df,tmp)
}
}
}
}
df
df
df
for(i in colnames(x)){
for(j in colnames(y)){
for(k in unique(groups)){
a<-x[groups==k,i,drop=F]
b<-y[groups==k,j,drop=F]
tmp<-c(i,j,cor(a[complete.cases(b),],b[complete.cases(b),],use="everything",method=method),cor.test(a[complete.cases(b),],b[complete.cases(b),],method=method)$p.value,k)
if(is.null(df)){
df<-tmp
}
else{
df<-rbind(df,tmp)
}
}
}
return(df)
}
correlate(asv,meta$pH)
correlate(t(asv),meta$pH)
# Correlate ####
full_cor <- correlate(x = asv,
y = meta$pH,
use = "complete.obs")
# Correlate ####
ggcorr(asv)
# Correlate ####
ggcorr(asv) + theme(axis.text = element_blank())
# Correlate ####
ggcorr(asv) + theme(axis.text.y = element_blank())
?geom_text
# Correlate ####
ggcorr(asv,alpha=0)
full_cor <- correlate(x = asv,
use = "complete.obs")
full_cor
View(full_cor)
full_cor <- correlate(x = asv,
use = "complete.obs",diagonal = FALSE)
full_cor
full_cor <- correlate(x = asv,
use = "complete.obs",diagonal = TRUE)
full_cor[full_cor < .5] <- 0
full_cor[full_cor == 1] <- 0
full_cor %>% filter(rowSums(full_cor) >= .5)
rowSums(full_cor) >= .5
rowSums(full_cor)
row.names(full_cor) <- full_cor$rowname
full_cor$rowname <- NULL
full_cor %>% filter(rowSums(full_cor) >= .5)
full_cor <- full_cor %>% filter(rowSums(full_cor) >= .5)
full_cor <- correlate(x = asv,
use = "complete.obs",diagonal = TRUE)
full_cor[full_cor < .5] <- 0
full_cor[full_cor == 1] <- 0
row.names(full_cor) <- full_cor$rowname
full_cor$rowname <- NULL
full_cor <- correlate(x = asv,
use = "complete.obs",diagonal = TRUE)
full_cor[full_cor < .5] <- 0
full_cor[full_cor == 1] <- 0
row.names(full_cor) <- full_cor$rowname
full_cor <- as.data.frame(full_cor)
full_cor$rowname <- NULL
full_cor <- full_cor %>% filter(rowSums(full_cor) >= .5)
ggcorr(full_cor)
heatmap(as.matrix(full_cor))
row.names(full_cor)
ps_ra %>% subset_taxa(taxa_names(ps_ra) %in% row.names(full_cor))
?plot_heatmap
ps_ra %>% subset_taxa(taxa_names(ps_ra) %in% row.names(full_cor)) %>%
plot_heatmap()
ps_correlated_taxa <- ps_ra %>% subset_taxa(taxa_names(ps_ra) %in% row.names(full_cor)) %>%
plot_heatmap()
ps_correlated_taxa <- ps_ra %>% subset_taxa(taxa_names(ps_ra) %in% row.names(full_cor))
ps_correlated_taxa
plot_heatmap(ps_correlated_taxa)
ps_correlated_taxa = prune_samples(sample_sums(ps_correlated_taxa) > .5, ps_correlated_taxa)
ps_correlated_taxa
plot_heatmap(ps_correlated_taxa)
plot_heatmap(ps_correlated_taxa) %>% facet_grid(~Sponge_Species)
plot_heatmap(ps_correlated_taxa,rows=NULL) %>% facet_grid(~Sponge_Species)
plot_heatmap(ps_correlated_taxa,sample.label = "Sponge_Species")
plot_heatmap(ps_correlated_taxa,sample.label = "Sponge_Species",sample.order = "Sponge_Species")
plot_heatmap(ps_correlated_taxa,sample.label = "Sponge_Species",sample.order = "Sponge_Species") +
scale_fill_viridis_c()
ggcorr(ps_correlated_taxa@otu_table)
plot_composition(ps_correlated_taxa)
